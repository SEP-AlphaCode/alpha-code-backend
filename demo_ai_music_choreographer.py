"""
Alpha Mini AI Music Choreographer Demo
T·ª± ƒë·ªông ph√¢n t√≠ch nh·∫°c v√† t·∫°o choreography th√¥ng minh
"""

import asyncio
import os
import sys
import json
from pathlib import Path
from typing import Optional

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from app.services.music_analysis import MusicAnalysisService
from app.services.ai_choreographer import ai_choreographer_service
from app.services.alpha_mini_robot import alpha_mini_robot_service
from app.services.audio_player import audio_player_service


class AlphaMiniAIMusicDemo:
    """Demo class cho AI Music Choreographer"""
    
    def __init__(self):
        self.music_analysis_service = MusicAnalysisService()
        self.choreographer = ai_choreographer_service
        self.robot_service = alpha_mini_robot_service
        self.audio_service = audio_player_service
        
    async def process_music_file(self, music_file_path: str) -> Optional[dict]:
        """X·ª≠ l√Ω file nh·∫°c t·ª´ import ƒë·∫øn t·∫°o choreography"""
        
        if not os.path.exists(music_file_path):
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {music_file_path}")
            return None
            
        filename = os.path.basename(music_file_path)
        print(f"üéµ ƒêang x·ª≠ l√Ω file nh·∫°c: {filename}")
        
        try:
            # B∆∞·ªõc 1: Ph√¢n t√≠ch nh·∫°c
            print("üìä B∆∞·ªõc 1: Ph√¢n t√≠ch ƒë·∫∑c tr∆∞ng √¢m nh·∫°c...")
            music_analysis = await self.music_analysis_service.analyze_audio_file(
                music_file_path, filename
            )
            
            print(f"‚úÖ Ph√¢n t√≠ch ho√†n th√†nh:")
            print(f"   - Th·ªùi l∆∞·ª£ng: {music_analysis.duration:.2f}s")
            print(f"   - Tempo: {music_analysis.tempo:.1f} BPM")
            print(f"   - S·ªë beats: {len(music_analysis.beats)}")
            
            # B∆∞·ªõc 2: T·∫°o choreography th√¥ng minh
            print("ü§ñ B∆∞·ªõc 2: T·∫°o choreography AI...")
            choreography = await self.choreographer.create_intelligent_choreography(
                music_analysis
            )
            
            print(f"‚úÖ Choreography t·∫°o th√†nh c√¥ng:")
            print(f"   - S·ªë segments: {len(choreography.segments)}")
            print(f"   - T·ªïng s·ªë actions: {sum(len(seg.actions) for seg in choreography.segments)}")
            print(f"   - Emotion ch√≠nh: {choreography.metadata['emotion_analysis']['primary_emotion']}")

            # B∆∞·ªõc 3: Hi·ªÉn th·ªã chi ti·∫øt choreography
            print("\nüé≠ Chi ti·∫øt Choreography:")
            for i, segment in enumerate(choreography.segments):
                print(f"\n  Segment {i+1} ({segment.start_time:.1f}s - {segment.end_time:.1f}s):")
                print(f"    Emotion: {segment.primary_emotion}, Energy: {segment.energy_level:.2f}")
                
                # Group actions by type for better display
                actions_by_type = {"dance": [], "action": [], "expression": [], "light": []}
                for action in segment.actions:
                    action_type = action.type
                    if action_type in actions_by_type:
                        actions_by_type[action_type].append(action)
                
                # Display each type
                for action_type, actions in actions_by_type.items():
                    if actions:
                        type_emoji = {"dance": "üíÉ", "action": "ü§∏", "expression": "üé≠", "light": "üí°"}
                        print(f"    {type_emoji.get(action_type, 'üé™')} {action_type.upper()}:")
                        for action in actions:
                            if action_type == "light":
                                color = action.parameters.get("color", "unknown")
                                mode = action.parameters.get("mode", "normal") 
                                print(f"      - {color} light ({mode}) ({action.start_time:.1f}s, {action.duration:.1f}s)")
                            else:
                                print(f"      - {action.name} ({action.start_time:.1f}s, {action.duration:.1f}s)")
                    
            return {
                "music_analysis": music_analysis,
                "choreography": choreography,
                "success": True
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    async def execute_choreography(self, choreography_data: dict, play_music: bool = True):
        """Th·ª±c thi choreography tr√™n robot"""
        
        print("üé™ B∆∞·ªõc 3: Th·ª±c thi choreography tr√™n robot...")
        
        try:
            music_analysis = choreography_data["music_analysis"]
            choreography = choreography_data["choreography"]
            
            # K·∫øt n·ªëi robot n·∫øu ch∆∞a c√≥
            if not self.robot_service.is_connected:
                print("üîå ƒêang k·∫øt n·ªëi robot...")
                if not await self.robot_service.find_and_connect():
                    print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi robot")
                    return False
            
            print("‚úÖ Robot ƒë√£ k·∫øt n·ªëi")
            
            # Th·ª±c hi·ªán choreography
            print("üíÉ B·∫Øt ƒë·∫ßu bi·ªÉu di·ªÖn v·ªõi lights v√† expressions...")
            
            if len(choreography.segments) > 0:
                # Chu·∫©n b·ªã danh s√°ch actions ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô ho√° theo th·ªùi gian
                all_actions = []
                for segment in choreography.segments:
                    for action in segment.actions:
                        all_actions.append({
                            "type": action.type,
                            "name": action.name,
                            "start_time": action.start_time,
                            "duration": action.duration,
                            "params": action.parameters,
                        })
                
                # Kh·ªüi ch·∫°y performance v√† ph√°t nh·∫°c input song song
                perf_task = asyncio.create_task(self.robot_service.synchronized_performance(
                    all_actions, choreography.duration
                ))

                if play_music:
                    music_task = asyncio.create_task(self.audio_service.play_music_file(music_analysis.file_path))
                    results = await asyncio.gather(perf_task, music_task, return_exceptions=True)
                else:
                    results = [await perf_task]

                success = bool(results and results[0] is True)
                print("üéâ Synchronized performance completed successfully!" if success else "‚ö†Ô∏è Performance completed with some issues")
            else:
                # Fallback to segment-by-segment execution
                for i, segment in enumerate(choreography.segments):
                    print(f"üé≠ Segment {i+1}: {segment.primary_emotion}")
                    
                    # Separate actions by type for parallel execution
                    dances = [a for a in segment.actions if a.type == "dance"]
                    actions = [a for a in segment.actions if a.type == "action"]
                    expressions = [a for a in segment.actions if a.type == "expression"]
                    lights = [a for a in segment.actions if a.type == "light"]
                    
                    # Execute using continuous dance method if we have multiple types
                    if len(dances) > 0 and len(expressions) > 0:
                        dance_names = [a.name for a in dances]
                        expression_names = [a.name for a in expressions]
                        light_colors = [a.parameters.get("color", "green") for a in lights] or ["green"]
                        
                        await self.robot_service.continuous_dance_with_expressions_and_lights(
                            dance_names, expression_names, light_colors, 
                            segment.end_time - segment.start_time
                        )
                    else:
                        # Execute individual actions
                        for action in segment.actions:
                            try:
                                if action.type == "dance":
                                    print(f"  üíÉ Dance: {action.name}")
                                    await self.robot_service.play_dance(action.name, action.duration)
                                    
                                elif action.type == "action":
                                    print(f"  ü§∏ Action: {action.name}")
                                    await self.robot_service.play_action(action.name, action.duration)
                                    
                                elif action.type == "expression":
                                    print(f"  üé≠ Expression: {action.name}")
                                    await self.robot_service.play_expression(action.name)
                                    
                                elif action.type == "light":
                                    color = action.parameters.get("color", "green")
                                    mode = action.parameters.get("mode", "normal")
                                    print(f"  üí° Light: {color} ({mode})")
                                    await self.robot_service.set_mouth_lamp(
                                        color, mode, int(action.duration * 1000)
                                    )
                                
                                # Small delay between actions
                                await asyncio.sleep(0.2)
                                
                            except Exception as e:
                                print(f"‚ö†Ô∏è L·ªói th·ª±c hi·ªán action {action.name}: {e}")
                                continue
            
            print("üéâ Bi·ªÉu di·ªÖn ho√†n th√†nh!")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói th·ª±c thi: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def save_choreography(self, choreography_data: dict, output_dir: str = "data/choreography"):
        """L∆∞u choreography v√†o file"""
        
        try:
            os.makedirs(output_dir, exist_ok=True)
            
            choreography = choreography_data["choreography"]
            filename = f"{choreography.id}.json"
            filepath = os.path.join(output_dir, filename)
            
            # Convert to dict for JSON serialization
            choreography_dict = {
                "id": choreography.id,
                "music_analysis_id": choreography.music_analysis_id,
                "filename": choreography.filename,
                "duration": choreography.duration,
                "style": choreography.style,
                "created_at": choreography.created_at,
                "metadata": choreography.metadata,
                "segments": []
            }
            
            for segment in choreography.segments:
                segment_dict = {
                    "start_time": segment.start_time,
                    "end_time": segment.end_time,
                    "tempo": segment.tempo,
                    "energy_level": segment.energy_level,
                    "primary_emotion": segment.primary_emotion,
                    "actions": []
                }
                
                for action in segment.actions:
                    action_dict = {
                        "type": action.type,
                        "name": action.name,
                        "start_time": action.start_time,
                        "duration": action.duration,
                        "intensity": action.intensity,
                        "parameters": action.parameters
                    }
                    segment_dict["actions"].append(action_dict)
                
                choreography_dict["segments"].append(segment_dict)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(choreography_dict, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ Choreography ƒë√£ l∆∞u: {filepath}")
            return filepath
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file: {e}")
            return None

async def main():
    """Main demo function"""
    
    print("üéµ Alpha Mini AI Music Choreographer Demo ü§ñ")
    print("=" * 50)
    
    demo = AlphaMiniAIMusicDemo()
    
    # T√¨m file nh·∫°c trong th∆∞ m·ª•c uploads
    uploads_dir = "uploads/music"
    if not os.path.exists(uploads_dir):
        print(f"‚ùå Th∆∞ m·ª•c {uploads_dir} kh√¥ng t·ªìn t·∫°i")
        return
    
    # L·∫•y danh s√°ch file nh·∫°c
    music_files = []
    for ext in ['.mp3', '.wav', '.m4a', '.flac']:
        music_files.extend([f for f in os.listdir(uploads_dir) if f.lower().endswith(ext)])
    
    if not music_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file nh·∫°c n√†o trong uploads/music")
        print("üìÅ H√£y copy file nh·∫°c v√†o th∆∞ m·ª•c uploads/music v√† ch·∫°y l·∫°i")
        return
    
    print(f"üéµ T√¨m th·∫•y {len(music_files)} file nh·∫°c:")
    for i, filename in enumerate(music_files, 1):
        print(f"   {i}. {filename}")
    
    # Ch·ªçn file ƒë·ªÉ x·ª≠ l√Ω (ho·∫∑c x·ª≠ l√Ω file ƒë·∫ßu ti√™n)
    selected_file = music_files[0]
    music_file_path = os.path.join(uploads_dir, selected_file)
    
    print(f"\nüéØ ƒêang x·ª≠ l√Ω: {selected_file}")
    print("-" * 30)
    
    # X·ª≠ l√Ω file nh·∫°c
    result = await demo.process_music_file(music_file_path)
    
    if result and result["success"]:
        # L∆∞u choreography
        await demo.save_choreography(result)
        
        # H·ªèi c√≥ mu·ªën th·ª±c thi tr√™n robot kh√¥ng
        print(f"\nü§ñ Choreography ƒë√£ s·∫µn s√†ng!")
        print(f"üí° ƒê·ªÉ th·ª±c thi tr√™n robot th·∫≠t, h√£y:")
        print(f"   1. ƒê·∫£m b·∫£o robot Alpha Mini ƒë√£ k·∫øt n·ªëi")
        print(f"   2. Uncomment ph·∫ßn execute_choreography b√™n d∆∞·ªõi")
        
        # Uncommnt d√≤ng n√†y ƒë·ªÉ th·ª±c thi tr√™n robot th·∫≠t
        await demo.execute_choreography(result, play_music=True)
        
    print(f"\nüéâ Demo ho√†n th√†nh!")

if __name__ == "__main__":
    asyncio.run(main())
