<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Byte-compiled / optimized / DLL files&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;&#10;# C extensions&#10;*.so&#10;&#10;# Distribution / packaging&#10;.Python&#10;env/&#10;build/&#10;develop-eggs/&#10;dist/&#10;downloads/&#10;eggs/&#10;.eggs/&#10;lib/&#10;lib64/&#10;parts/&#10;sdist/&#10;var/&#10;*.egg-info/&#10;.installed.cfg&#10;*.egg&#10;&#10;# Installer logs&#10;pip-log.txt&#10;pip-delete-this-directory.txt&#10;&#10;# Unit test / coverage reports&#10;htmlcov/&#10;.tox/&#10;.nox/&#10;.coverage&#10;.coverage.*&#10;.cache&#10;nosetests.xml&#10;coverage.xml&#10;*.cover&#10;.hypothesis/&#10;.pytest_cache/&#10;&#10;# Jupyter Notebook&#10;.ipynb_checkpoints&#10;&#10;# pyenv&#10;.python-version&#10;&#10;# mypy&#10;.mypy_cache/&#10;.dmypy.json&#10;&#10;# Pyre type checker&#10;.pyre/&#10;&#10;# VS Code&#10;.vscode/&#10;&#10;# OS generated files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Virtual environments&#10;.venv/&#10;venv/&#10;ENV/&#10;&#10;# Logs&#10;*.log&#10;&#10;# Local env files&#10;.env&#10;.env.*&#10;&#10;# Misc&#10;*.bak&#10;*.swp&#10;*.swo&#10;&#10;# Ignore test images and outputs&#10;*.png&#10;*.jpg&#10;*.jpeg&#10;*.bmp&#10;*.gif&#10;*.tiff&#10;*.webp&#10;*.out&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Alpha Mini Robot API&#10;&#10;This project is a FastAPI backend for controlling and interacting with the Alpha Mini robot.&#10;&#10;## Project Structure&#10;&#10;- `main.py`: Entry point, includes FastAPI app and router registration.&#10;- `routers/`: Contains API route definitions.&#10;- `models/`: Pydantic models for request/response schemas.&#10;- `services/`: Business logic and robot control functions.&#10;- `utils/`: Utility/helper functions.&#10;&#10;## Setup&#10;&#10;1. **Install dependencies**&#10;&#10;```bash&#10;pip install -r requirements.txt&#10;```&#10;&#10;2. **Run the server**&#10;&#10;```bash&#10;uvicorn main:app --reload&#10;```&#10;&#10;## Usage&#10;&#10;- Access the API docs at: http://localhost:8000/docs&#10;- Example endpoints:&#10;  - `GET /` - Health check&#10;  - `GET /hello/{name}` - Greet by name&#10;&#10;## Customization&#10;&#10;- Add new endpoints in `routers/` and register them in `main.py`.&#10;- Implement business logic in `services/`.&#10;- Define data models in `models/`.&#10;- Place helper functions in `utils/`.&#10;&#10;---&#10;&#10;For more details, see the code comments and FastAPI documentation.&#10;fastapi&#10;uvicorn&#10;pydantic&#10;&#10;" />
              <option name="updatedContent" value="# Alpha Mini Robot API&#10;&#10;This project is a FastAPI backend for controlling and interacting with the Alpha Mini robot, including features for Osmo coding card recognition and audio conversion.&#10;&#10;## Project Structure&#10;&#10;- `main.py`: Entry point, includes FastAPI app and router registration.&#10;- `routers/`: Contains API route definitions.&#10;- `models/`: Pydantic models for request/response schemas.&#10;- `services/`: Business logic and robot control functions.&#10;- `utils/`: Utility/helper functions.&#10;&#10;## Setup&#10;&#10;### 1. Install Python dependencies&#10;&#10;```bash&#10;pip install -r requirements.txt&#10;```&#10;&#10;### 2. Install system dependencies&#10;&#10;#### **FFmpeg** (for audio conversion)&#10;- **Windows:**&#10;  1. Download FFmpeg from [https://ffmpeg.org/download.html](https://ffmpeg.org/download.html) (choose Windows build).&#10;  2. Extract and add the `bin` folder to your system `PATH` environment variable.&#10;  3. Test in terminal: `ffmpeg -version`&#10;&#10;- **Linux (Debian/Ubuntu):**&#10;  ```bash&#10;  sudo apt update &amp;&amp; sudo apt install ffmpeg&#10;  ```&#10;&#10;#### **Tesseract OCR** (for image recognition)&#10;- **Windows:**&#10;  1. Download the installer from [https://github.com/tesseract-ocr/tesseract](https://github.com/tesseract-ocr/tesseract) (see Releases).&#10;  2. Install and add the install directory to your system `PATH`.&#10;  3. Test in terminal: `tesseract --version`&#10;&#10;- **Linux (Debian/Ubuntu):**&#10;  ```bash&#10;  sudo apt update &amp;&amp; sudo apt install tesseract-ocr&#10;  ```&#10;&#10;### 3. Run the server&#10;&#10;```bash&#10;uvicorn main:app --reload&#10;```&#10;&#10;## Usage&#10;&#10;- Access the API docs at: http://localhost:8000/docs&#10;- Example endpoints:&#10;  - `GET /` - Health check&#10;  - `POST /osmo/parse_and_export` - Parse Osmo cards from JSON&#10;  - `POST /osmo/recognize_from_image` - Parse Osmo cards from image&#10;  - `POST /audio/convert` - Convert audio file to .wav&#10;&#10;## Customization&#10;&#10;- Add new endpoints in `routers/` and register them in `main.py`.&#10;- Implement business logic in `services/`.&#10;- Define data models in `models/`.&#10;- Place helper functions in `utils/`.&#10;&#10;---&#10;&#10;For more details, see the code comments and FastAPI documentation.&#10;fastapi&#10;uvicorn&#10;pydantic" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/__init__.py" />
              <option name="updatedContent" value="# This folder contains Pydantic models for request and response schemas.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>