<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/routers/music_router.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/routers/music_router.py" />
              <option name="originalContent" value="from typing import Optional&#10;&#10;from fastapi import APIRouter&#10;from pydantic import BaseModel&#10;&#10;from app.services.audio.audio_service import convert_audio_to_wav_and_upload&#10;from app.services.music.planner import build_activity_json&#10;from fastapi import APIRouter, UploadFile, File, HTTPException, Body, Query&#10;&#10;router = APIRouter()&#10;&#10;&#10;class MusicRequest(BaseModel):&#10;    music_name: str&#10;    music_url: str&#10;    duration: float  # seconds&#10;&#10;&#10;@router.post('/generate-dance-plan')&#10;async def generate_dance_plan(req: MusicRequest):&#10;    return build_activity_json(req.music_name, req.music_url, req.duration)&#10;&#10;&#10;@router.post('/upload-music-and-generate-plan')&#10;async def upload_music_and_generate_plan(&#10;        file: UploadFile = File(...),&#10;        start_time: Optional[float] = Query(None, description=&quot;Start time in seconds (optional)&quot;, ge=0),&#10;        end_time: Optional[float] = Query(None, description=&quot;End time in seconds (optional)&quot;, ge=0)):&#10;    # Chỉ cho phép mp3 và mp4&#10;    if not (file.filename.lower().endswith(&quot;.mp3&quot;) or file.filename.lower().endswith(&quot;.mp4&quot;)):&#10;        raise HTTPException(status_code=400, detail=&quot;Only .mp3 or .mp4 files are supported.&quot;)&#10;&#10;    # Validate time parameters&#10;    if start_time is not None and end_time is not None and start_time &gt;= end_time:&#10;        raise HTTPException(status_code=400, detail=&quot;start_time must be less than end_time&quot;)&#10;&#10;    try:&#10;        result = await convert_audio_to_wav_and_upload(file, start_time=start_time, end_time=end_time)&#10;&#10;        # Add trimming info to response if parameters were provided&#10;&#10;        response_data = build_activity_json(result[&quot;file_name&quot;], result[&quot;url&quot;], result[&quot;duration&quot;])&#10;&#10;        # lấy phần data ra&#10;        new_res_data = response_data['data'].copy()&#10;&#10;        # map start_time / end_time vào music_info nếu có&#10;        if start_time is not None or end_time is not None:&#10;            new_res_data['music_info']['start_time'] = start_time&#10;            new_res_data['music_info']['end_time'] = end_time&#10;&#10;&#10;        return new_res_data&#10;            except ValueError as ve:&#10;                raise HTTPException(status_code=400, detail=str(ve))&#10;            except Exception as e:&#10;                raise HTTPException(status_code=500, detail=f&quot;Conversion or upload failed: {str(e)}&quot;)&#10;" />
              <option name="updatedContent" value="from typing import Optional&#10;&#10;from fastapi import APIRouter&#10;from pydantic import BaseModel&#10;&#10;from app.services.audio.audio_service import convert_audio_to_wav_and_upload&#10;from app.services.music.planner import build_activity_json&#10;from fastapi import APIRouter, UploadFile, File, HTTPException, Body, Query&#10;&#10;router = APIRouter()&#10;&#10;&#10;class MusicRequest(BaseModel):&#10;    music_name: str&#10;    music_url: str&#10;    duration: float  # seconds&#10;&#10;&#10;@router.post('/generate-dance-plan')&#10;async def generate_dance_plan(req: MusicRequest):&#10;    return build_activity_json(req.music_name, req.music_url, req.duration)&#10;&#10;&#10;@router.post('/upload-music-and-generate-plan')&#10;async def upload_music_and_generate_plan(&#10;        file: UploadFile = File(...),&#10;        start_time: Optional[float] = Query(None, description=&quot;Start time in seconds (optional)&quot;, ge=0),&#10;        end_time: Optional[float] = Query(None, description=&quot;End time in seconds (optional)&quot;, ge=0)):&#10;    # Chỉ cho phép mp3 và mp4&#10;    if not (file.filename.lower().endswith(&quot;.mp3&quot;) or file.filename.lower().endswith(&quot;.mp4&quot;)):&#10;        raise HTTPException(status_code=400, detail=&quot;Only .mp3 or .mp4 files are supported.&quot;)&#10;&#10;    # Validate time parameters&#10;    if start_time is not None and end_time is not None and start_time &gt;= end_time:&#10;        raise HTTPException(status_code=400, detail=&quot;start_time must be less than end_time&quot;)&#10;&#10;    try:&#10;        result = await convert_audio_to_wav_and_upload(file, start_time=start_time, end_time=end_time)&#10;&#10;        # Add trimming info to response if parameters were provided&#10;&#10;        response_data = build_activity_json(result[&quot;file_name&quot;], result[&quot;url&quot;], result[&quot;duration&quot;])&#10;&#10;        # lấy phần data ra&#10;        new_res_data = response_data['data'].copy()&#10;&#10;        # map start_time / end_time vào music_info nếu có&#10;        if start_time is not None or end_time is not None:&#10;            new_res_data['music_info']['start_time'] = start_time&#10;            new_res_data['music_info']['end_time'] = end_time&#10;&#10;&#10;        return new_res_data&#10;    except ValueError as ve:&#10;        raise HTTPException(status_code=400, detail=str(ve))&#10;    except Exception as e:&#10;        raise HTTPException(status_code=500, detail=f&quot;Conversion or upload failed: {str(e)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>